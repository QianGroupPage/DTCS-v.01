{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"LBL CRN - Chemical Reaction Simulator in Python Introduction ...TODO How to Install The easy install is just pip install git+https://github.com/rithvikp/lbl-crn Once it's installed (it might take a while), run python -m lblcrn --version to check if everything installed. Walkthrough This will walk you through the workflow of a predator-prey system. from lblcrn.homogenous_crn import * First, you need to make a SpeciesManager to keep track of all your species. Then, you can create some species. sm = SpeciesManager() prey = sm.sp('rabbit', Orbital('1s', 535.0), {0:2}) pred = sm.sp('fox', Orbital('1s', 535.5), {0:1}) Then, you define your reaction system. rsys = RxnSystem( Rxn(x1 + x2, 2 * x2, 1.5), Rxn(x1, 2 * x1, 1), Rxn(x2, 1, 1), sm ) Then, you solve the system. This simulates the system for time . solution = solve(rsys, time=45, max_step=0.01) solution.process() solution.basic_plot() And then to plot the gaussian: solution.plot_gaussian(envelope=True) You can download this example here . Citation Information ...TODO More Information Quickstart and Examples License information Contact us for issues, bugs, and contributing. API Documentation","title":"About"},{"location":"#lbl-crn-chemical-reaction-simulator-in-python","text":"","title":"LBL CRN - Chemical Reaction Simulator in Python"},{"location":"#introduction","text":"...TODO","title":"Introduction"},{"location":"#how-to-install","text":"The easy install is just pip install git+https://github.com/rithvikp/lbl-crn Once it's installed (it might take a while), run python -m lblcrn --version to check if everything installed.","title":"How to Install"},{"location":"#walkthrough","text":"This will walk you through the workflow of a predator-prey system. from lblcrn.homogenous_crn import * First, you need to make a SpeciesManager to keep track of all your species. Then, you can create some species. sm = SpeciesManager() prey = sm.sp('rabbit', Orbital('1s', 535.0), {0:2}) pred = sm.sp('fox', Orbital('1s', 535.5), {0:1}) Then, you define your reaction system. rsys = RxnSystem( Rxn(x1 + x2, 2 * x2, 1.5), Rxn(x1, 2 * x1, 1), Rxn(x2, 1, 1), sm ) Then, you solve the system. This simulates the system for time . solution = solve(rsys, time=45, max_step=0.01) solution.process() solution.basic_plot() And then to plot the gaussian: solution.plot_gaussian(envelope=True) You can download this example here .","title":"Walkthrough"},{"location":"#citation-information","text":"...TODO","title":"Citation Information"},{"location":"#more-information","text":"Quickstart and Examples License information Contact us for issues, bugs, and contributing. API Documentation","title":"More Information"},{"location":"api-docs/","text":"","title":"API Docs"},{"location":"contact/","text":"","title":"Contact"},{"location":"examples/","text":"Examples Setup and solve simple reaction equations Create a reaction system Reaction systems are created from various species which have specified orbitals, names and schedules. These species are then combined into a reaction system. Below is a sample predator-prey system that is modeled through this system. TODO: Update api to follow this (move to optional parameters) sm = SpeciesManager() x1 = sm.sp('x', {0:2}) x2 = sm.sp('y', {0:1}) rsys = RxnSystem( Rxn(x1 + x2, 2 * x2, 1.5), Rxn(x1, 2 * x1, 1), Rxn(x2, 1, 1), sm ) Solve the reaction system Simply specify the reaction system, the runtime, and other optional parameters for differential equation solving to simulate the system. s = solve(rsys, time=40, max_step=1e-2) Visualize and understand the system Plotting species in the time domain can be done with a single command. s.basic_plot()","title":"Examples"},{"location":"examples/#examples","text":"","title":"Examples"},{"location":"examples/#setup-and-solve-simple-reaction-equations","text":"","title":"Setup and solve simple reaction equations"},{"location":"examples/#create-a-reaction-system","text":"Reaction systems are created from various species which have specified orbitals, names and schedules. These species are then combined into a reaction system. Below is a sample predator-prey system that is modeled through this system. TODO: Update api to follow this (move to optional parameters) sm = SpeciesManager() x1 = sm.sp('x', {0:2}) x2 = sm.sp('y', {0:1}) rsys = RxnSystem( Rxn(x1 + x2, 2 * x2, 1.5), Rxn(x1, 2 * x1, 1), Rxn(x2, 1, 1), sm )","title":"Create a reaction system"},{"location":"examples/#solve-the-reaction-system","text":"Simply specify the reaction system, the runtime, and other optional parameters for differential equation solving to simulate the system. s = solve(rsys, time=40, max_step=1e-2)","title":"Solve the reaction system"},{"location":"examples/#visualize-and-understand-the-system","text":"Plotting species in the time domain can be done with a single command. s.basic_plot()","title":"Visualize and understand the system"},{"location":"license/","text":"","title":"License"},{"location":"quickstart/","text":"Getting Started","title":"Quickstart"},{"location":"quickstart/#getting-started","text":"","title":"Getting Started"}]}